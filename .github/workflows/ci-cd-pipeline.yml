name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - 'staging'
          - 'production'
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NAMESPACE: trading-system
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1

jobs:
  # =============================================================================
  # CODE QUALITY AND SECURITY CHECKS
  # =============================================================================

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.passed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements-core.txt
        pip install bandit safety

    - name: Run code formatting check
      run: |
        black --check --diff src/ tests/
        isort --check-only --diff src/ tests/

    - name: Run linting
      run: |
        flake8 src/ tests/ --max-line-length=120 --ignore=E203,W503
        mypy src/ --ignore-missing-imports --no-strict-optional

    - name: Run security analysis
      run: |
        bandit -r src/ -f json -o bandit-report.json
        safety check --json --output safety-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

    - name: Quality check result
      id: quality-check
      run: |
        if [ -f bandit-report.json ] && [ -f safety-report.json ]; then
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "passed=false" >> $GITHUB_OUTPUT
        fi

  # =============================================================================
  # AUTOMATED TESTING
  # =============================================================================

  automated-tests:
    name: Automated Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        test-type: [unit, integration, smoke]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements-core.txt

    - name: Run ${{ matrix.test-type }} tests
      run: |
        if [ "${{ matrix.test-type }}" = "smoke" ]; then
          pytest tests/smoke -m "smoke" -v --tb=short --maxfail=5
        elif [ "${{ matrix.test-type }}" = "unit" ]; then
          pytest tests/unit -m "unit" -v --cov=src --cov-report=xml:coverage-${{ matrix.test-type }}-${{ matrix.python-version }}.xml
        elif [ "${{ matrix.test-type }}" = "integration" ]; then
          pytest tests/integration -m "integration" -v --cov=src --cov-report=xml:coverage-${{ matrix.test-type }}-${{ matrix.python-version }}.xml
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-${{ matrix.python-version }}
        path: |
          coverage-${{ matrix.test-type }}-${{ matrix.python-version }}.xml
          .pytest_cache/

  # =============================================================================
  # DOCKER CONTAINER BUILDING AND TESTING
  # =============================================================================

  docker-build:
    name: Build & Test Docker Containers
    runs-on: ubuntu-latest
    needs: [code-quality, automated-tests]
    if: github.event_name == 'push' || github.event_name == 'release' || github.event.inputs.force_deploy == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test Docker container
      run: |
        # Pull the built image and run basic tests
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} python -c "import trading_rl_agent; print('✅ Container test passed')"

    - name: Security scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # STAGING DEPLOYMENT
  # =============================================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, automated-tests, docker-build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      id: deploy
      run: |
        cd k8s
        export IMAGE_TAG=${{ needs.docker-build.outputs.image-tag }}
        export ENVIRONMENT=staging
        ./deploy.sh deploy
        echo "url=https://staging-api.trading-system.local" >> $GITHUB_OUTPUT

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/trading-engine -n trading-system
        kubectl wait --for=condition=available --timeout=300s deployment/api-service -n trading-system

    - name: Run smoke tests against staging
      run: |
        cd k8s
        ./deploy.sh smoke-test

    - name: Performance test staging
      run: |
        pip install locust
        locust -f tests/performance/locustfile.py --host=${{ steps.deploy.outputs.url }} --users=50 --spawn-rate=5 --run-time=2m --headless

  # =============================================================================
  # PRODUCTION DEPLOYMENT
  # =============================================================================

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, automated-tests, docker-build, deploy-staging]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl for production
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Create backup
      run: |
        cd k8s
        ./deploy.sh backup

    - name: Deploy to production
      id: deploy
      run: |
        cd k8s
        export IMAGE_TAG=${{ needs.docker-build.outputs.image-tag }}
        export ENVIRONMENT=production
        ./deploy.sh deploy
        echo "url=https://api.trading-system.com" >> $GITHUB_OUTPUT

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/trading-engine -n trading-system
        kubectl wait --for=condition=available --timeout=600s deployment/api-service -n trading-system

    - name: Verify deployment
      run: |
        cd k8s
        ./deploy.sh verify

    - name: Run production smoke tests
      run: |
        cd k8s
        ./deploy.sh smoke-test

  # =============================================================================
  # MONITORING AND ALERTING
  # =============================================================================

  monitoring-setup:
    name: Setup Monitoring & Alerting
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        fi
        export KUBECONFIG=kubeconfig

    - name: Deploy monitoring stack
      run: |
        cd k8s
        kubectl apply -f monitoring-stack.yaml

    - name: Setup alerting rules
      run: |
        cd k8s
        kubectl apply -f alerting-rules.yaml

    - name: Verify monitoring
      run: |
        kubectl get pods -n monitoring
        kubectl get services -n monitoring

  # =============================================================================
  # ROLLBACK CAPABILITY
  # =============================================================================

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        if [ "${{ needs.deploy-production.result }}" = "failure" ]; then
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export ENVIRONMENT=production
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export ENVIRONMENT=staging
        fi
        export KUBECONFIG=kubeconfig

    - name: Execute rollback
      run: |
        cd k8s
        ./deploy.sh rollback

    - name: Notify rollback
      uses: actions/github-script@v6
      with:
        script: |
          const environment = '${{ needs.deploy-production.result }}' === 'failure' ? 'production' : 'staging';
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Deployment Rollback - ${environment}`,
            body: `A deployment to ${environment} failed and has been automatically rolled back. Please investigate the issue.`
          });

  # =============================================================================
  # NOTIFICATION AND REPORTING
  # =============================================================================

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [code-quality, automated-tests, docker-build, deploy-staging, deploy-production, monitoring-setup]
    if: always()

    steps:
    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "Generated on: $(date)" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Pipeline Status" >> deployment-report.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> deployment-report.md
        echo "- Automated Tests: ${{ needs.automated-tests.result }}" >> deployment-report.md
        echo "- Docker Build: ${{ needs.docker-build.result }}" >> deployment-report.md
        echo "- Staging Deployment: ${{ needs.deploy-staging.result }}" >> deployment-report.md
        echo "- Production Deployment: ${{ needs.deploy-production.result }}" >> deployment-report.md
        echo "- Monitoring Setup: ${{ needs.monitoring-setup.result }}" >> deployment-report.md

    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md

    - name: Notify success
      if: ${{ needs.code-quality.result == 'success' && needs.automated-tests.result == 'success' && needs.docker-build.result == 'success' }}
      uses: actions/github-script@v6
      with:
        script: |
          const environment = '${{ needs.deploy-production.result }}' === 'success' ? 'production' : 'staging';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🎉 CI/CD Pipeline completed successfully!\n\n**Deployed to:** ${environment}\n**Image:** ${{ needs.docker-build.outputs.image-tag }}\n\nAll tests passed and deployment verified.`
          });

    - name: Notify failure
      if: ${{ needs.code-quality.result == 'failure' || needs.automated-tests.result == 'failure' || needs.docker-build.result == 'failure' }}
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `❌ CI/CD Pipeline failed!\n\n**Failed Jobs:**\n- Code Quality: ${{ needs.code-quality.result }}\n- Tests: ${{ needs.automated-tests.result }}\n- Docker Build: ${{ needs.docker-build.result }}\n\nPlease check the logs for details.`
          });