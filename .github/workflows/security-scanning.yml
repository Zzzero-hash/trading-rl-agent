name: Security Scanning & Vulnerability Assessment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'code'
          - 'dependencies'
          - 'container'
          - 'infrastructure'

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # =============================================================================

  code-security-scan:
    name: Code Security Analysis (SAST)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == '' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Run Bandit security analysis
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f txt -o bandit-report.txt

    - name: Run Semgrep security analysis
      run: |
        semgrep ci --config auto --json --output semgrep-report.json
        semgrep ci --config auto --text --output semgrep-report.txt

    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json
        safety check --text --output safety-report.txt

    - name: Upload SAST reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-reports
        path: |
          bandit-report.json
          bandit-report.txt
          semgrep-report.json
          semgrep-report.txt
          safety-report.json
          safety-report.txt

    - name: Comment SAST results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## ðŸ”’ Security Scan Results (SAST)\n\n';
          
          try {
            if (fs.existsSync('bandit-report.json')) {
              const bandit = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              const issues = bandit.results.length;
              comment += `**Bandit Issues:** ${issues}\n`;
            }
            
            if (fs.existsSync('semgrep-report.json')) {
              const semgrep = JSON.parse(fs.readFileSync('semgrep-report.json', 'utf8'));
              const issues = semgrep.results.length;
              comment += `**Semgrep Issues:** ${issues}\n`;
            }
            
            if (fs.existsSync('safety-report.json')) {
              const safety = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              const issues = safety.length;
              comment += `**Safety Issues:** ${issues}\n`;
            }
            
            comment += '\nðŸ“‹ Full reports available in workflow artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Error processing security reports:', error);
          }

  # =============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == '' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependency scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run Safety check
      run: |
        safety check --json --output safety-deps.json
        safety check --text --output safety-deps.txt

    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit.json
        pip-audit --format text --output pip-audit.txt

    - name: Run GitHub Dependabot alert check
      uses: actions/github-script@v6
      with:
        script: |
          const alerts = await github.rest.dependabot.listAlertsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open'
          });
          
          if (alerts.data.length > 0) {
            console.log(`Found ${alerts.data.length} open Dependabot alerts`);
            fs.writeFileSync('dependabot-alerts.json', JSON.stringify(alerts.data, null, 2));
          } else {
            console.log('No open Dependabot alerts found');
            fs.writeFileSync('dependabot-alerts.json', JSON.stringify([], null, 2));
          }

    - name: Upload dependency scan reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-reports
        path: |
          safety-deps.json
          safety-deps.txt
          pip-audit.json
          pip-audit.txt
          dependabot-alerts.json

  # =============================================================================
  # CONTAINER SECURITY SCANNING
  # =============================================================================

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == '' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t trading-rl-agent:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'trading-rl-agent:security-scan'
        format: 'sarif'
        output: 'trivy-container-results.sarif'

    - name: Run Trivy with detailed output
      run: |
        trivy image --format json --output trivy-container-detailed.json trading-rl-agent:security-scan
        trivy image --format table --output trivy-container-table.txt trading-rl-agent:security-scan

    - name: Run Docker Scout
      run: |
        docker scout cves trading-rl-agent:security-scan --format json --output docker-scout.json
        docker scout cves trading-rl-agent:security-scan --format table --output docker-scout.txt

    - name: Upload container security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-reports
        path: |
          trivy-container-results.sarif
          trivy-container-detailed.json
          trivy-container-table.txt
          docker-scout.json
          docker-scout.txt

    - name: Upload Trivy SARIF to GitHub
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-container-results.sarif'

  # =============================================================================
  # INFRASTRUCTURE SECURITY SCANNING
  # =============================================================================

  infrastructure-security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'infrastructure' || github.event.inputs.scan_type == '' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install infrastructure scanning tools
      run: |
        curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install.sh | bash

    - name: Run Trivy on Kubernetes manifests
      run: |
        trivy config --format json --output trivy-k8s.json k8s/
        trivy config --format table --output trivy-k8s.txt k8s/

    - name: Run tfsec on Terraform files (if any)
      run: |
        if [ -d "terraform" ]; then
          tfsec --format json --out tfsec.json terraform/
          tfsec --format table --out tfsec.txt terraform/
        else
          echo "No Terraform files found" > tfsec.txt
          echo "[]" > tfsec.json
        fi

    - name: Check for secrets in code
      run: |
        # Use gitleaks to detect secrets
        if command -v gitleaks &> /dev/null; then
          gitleaks detect --format json --output gitleaks.json
          gitleaks detect --format text --output gitleaks.txt
        else
          echo "Gitleaks not available, using basic secret detection"
          # Basic secret pattern detection
          grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{10,}['\"]" . --exclude-dir=.git --exclude-dir=node_modules > basic-secrets.txt || true
          echo "[]" > gitleaks.json
        fi

    - name: Upload infrastructure security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: infrastructure-security-reports
        path: |
          trivy-k8s.json
          trivy-k8s.txt
          tfsec.json
          tfsec.txt
          gitleaks.json
          gitleaks.txt
          basic-secrets.txt

  # =============================================================================
  # SECURITY REPORT AGGREGATION
  # =============================================================================

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [code-security-scan, dependency-scan, container-security-scan, infrastructure-security-scan]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all security reports
      uses: actions/download-artifact@v3
      with:
        path: security-reports/

    - name: Generate comprehensive security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        # Count issues from various reports
        echo "## Summary" >> security-report.md
        
        # SAST issues
        if [ -f "security-reports/sast-reports/bandit-report.json" ]; then
          BANDIT_ISSUES=$(jq '.results | length' security-reports/sast-reports/bandit-report.json)
          echo "- **Bandit Issues:** $BANDIT_ISSUES" >> security-report.md
        fi
        
        # Dependency issues
        if [ -f "security-reports/dependency-scan-reports/safety-deps.json" ]; then
          SAFETY_ISSUES=$(jq 'length' security-reports/dependency-scan-reports/safety-deps.json)
          echo "- **Safety Issues:** $SAFETY_ISSUES" >> security-report.md
        fi
        
        # Container issues
        if [ -f "security-reports/container-security-reports/trivy-container-detailed.json" ]; then
          TRIVY_ISSUES=$(jq '.Results[].Vulnerabilities | length' security-reports/container-security-reports/trivy-container-detailed.json | awk '{sum += $1} END {print sum}')
          echo "- **Container Vulnerabilities:** $TRIVY_ISSUES" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## Recommendations" >> security-report.md
        echo "1. Review and fix high-severity vulnerabilities" >> security-report.md
        echo "2. Update dependencies with known vulnerabilities" >> security-report.md
        echo "3. Implement security best practices in code" >> security-report.md
        echo "4. Regular security scanning in CI/CD pipeline" >> security-report.md

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-security-report
        path: security-report.md

    - name: Comment security report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          } catch (error) {
            console.log('Could not read security report:', error);
          }

  # =============================================================================
  # SECURITY ALERTING
  # =============================================================================

  security-alerts:
    name: Security Alerting
    runs-on: ubuntu-latest
    needs: [code-security-scan, dependency-scan, container-security-scan, infrastructure-security-scan]
    if: failure() || always()

    steps:
    - name: Check for critical security issues
      run: |
        # Check if any critical issues were found
        if [ -f "security-reports/sast-reports/bandit-report.json" ]; then
          CRITICAL_ISSUES=$(jq '.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL") | length' security-reports/sast-reports/bandit-report.json | wc -l)
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "CRITICAL_SECURITY_ISSUES=true" >> $GITHUB_ENV
          fi
        fi

    - name: Create security issue
      if: env.CRITICAL_SECURITY_ISSUES == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Critical Security Issues Detected',
            body: 'Critical security vulnerabilities have been detected in the latest security scan. Please review the security report and address these issues immediately.',
            labels: ['security', 'critical', 'bug'],
            assignees: ['@security-team']
          });

    - name: Send security notification
      if: env.CRITICAL_SECURITY_ISSUES == 'true'
      run: |
        echo "ðŸš¨ Critical security issues detected!"
        echo "Please review the security scan results and address vulnerabilities immediately."
        echo "Security reports are available in the workflow artifacts."