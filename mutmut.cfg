[mutmut]
# Path to the code to mutate
paths_to_mutate=src/trading_rl_agent/

# Path to the tests
backup=False
dict_synonyms=Struct, NamedStruct
runner=python -m pytest tests/unit/ -x --tb=short
tests_dir=tests/unit/

# Exclude certain files from mutation testing
exclude=(
    */__init__.py,
    */migrations/*,
    */test_*.py,
    */tests/*,
    */scripts/*,
    */examples/*,
    */docs/*,
    */configs/*,
    */cli.py,
    */main.py,
    */setup.py,
    */conftest.py,
    */logging_conf.py,
    */console.py,
    */serve_deployment.py
)

# Mutation operators to use
operators=(
    AOR,  # Arithmetic operator replacement
    AOD,  # Arithmetic operator deletion
    ROR,  # Relational operator replacement
    COD,  # Conditional operator deletion
    COI,  # Conditional operator insertion
    LCR,  # Logical connector replacement
    LOD,  # Logical operator deletion
    LOI,  # Logical operator insertion
    ASR,  # Assignment operator replacement
    UOI,  # Unary operator insertion
    UOD,  # Unary operator deletion
    SOR,  # Shift operator replacement
    BOR,  # Bitwise operator replacement
    BOD,  # Bitwise operator deletion
    BOI,  # Bitwise operator insertion
    CRP,  # Constant replacement
    CRD,  # Constant deletion
    CRI,  # Constant insertion
    ABS,  # Absolute value insertion
    AOR,  # Arithmetic operator replacement
    LCR,  # Logical connector replacement
    ROR,  # Relational operator replacement
    UOI,  # Unary operator insertion
    UOD,  # Unary operator deletion
)

# Timeout for test execution (seconds)
timeout_factor=2.0

# Number of processes to use
processes=4

# Output format
output_format=json

# Coverage data file
coverage_data=.coverage

# Verbose output
verbose=True

# Show progress
show_progress=True

# Use coverage to only mutate covered lines
use_coverage=True

# Minimum coverage threshold
min_coverage=80

# Exclude lines that are not covered
exclude_lines=(
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
)