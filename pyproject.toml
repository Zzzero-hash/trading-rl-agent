[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "trading-rl-agent"
version = "2.0.0"
description = "Production-grade hybrid reinforcement learning trading system with CNN+LSTM integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Trading RL Team", email = "team@trading-rl-agent.com"}
]
maintainers = [
    {name = "Trading RL Team", email = "team@trading-rl-agent.com"}
]
keywords = ["trading", "reinforcement-learning", "machine-learning", "finance", "algorithmic-trading"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    # Core dependencies only - use requirements files for full installation
    "numpy>=1.24.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
    "pyyaml>=6.0,<7.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "tqdm>=4.65.0,<5.0.0",
    "structlog>=23.1.0,<24.0.0",
    "requests>=2.31.0,<3.0.0",
    "typer>=0.9.0,<1.0.0",
    "rich>=13.0.0,<14.0.0",
]

[project.optional-dependencies]
# Development dependencies - testing and code quality
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-benchmark>=4.0.0,<5.0.0",
    "pytest-timeout>=2.1.0,<3.0.0",
    "pytest-xdist>=3.3.0,<4.0.0",
    "black>=23.7.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "ruff>=0.0.284,<1.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.3.0,<4.0.0",
    "jupyter>=1.0.0,<2.0.0",
    "ipykernel>=6.25.0,<7.0.0",
    "notebook>=7.0.0,<8.0.0",
    "click>=8.1.0,<9.0.0",
]

# Machine Learning dependencies
ml = [
    "scikit-learn>=1.3.0,<2.0.0",
    "torch>=2.0.0,<3.0.0",
    "scipy>=1.11.0,<2.0.0",
    "ta>=0.10.0,<1.0.0",
    "pandas-ta>=0.3.14b0,<1.0.0",
    "statsmodels>=0.14.0,<1.0.0",
    "empyrical>=0.5.5,<1.0.0",
    "optuna>=3.0.0,<4.0.0",
    "matplotlib>=3.7.0,<4.0.0",
    "seaborn>=0.12.0,<1.0.0",
    "gymnasium>=0.29.0,<1.0.0",
    "stable-baselines3>=2.0.0,<3.0.0",
]

# Production dependencies
production = [
    "gunicorn>=21.2.0,<22.0.0",
    "fastapi>=0.100.0,<1.0.0",
    "uvicorn>=0.23.0,<1.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "yfinance>=0.2.0,<1.0.0",
    "alpha-vantage>=2.3.0,<3.0.0",
    "beautifulsoup4>=4.12.0,<5.0.0",
    "ray[rllib,tune]>=2.6.0,<3.0.0",
    "vaderSentiment>=3.3.2,<4.0.0",
    "arch>=6.2.0,<7.0.0",
    "quantstats>=0.0.62,<1.0.0",
    "mlflow>=2.6.0,<3.0.0",
    "tensorboard>=2.13.0,<3.0.0",
    "wandb>=0.15.0,<1.0.0",
    "loguru>=0.7.0,<1.0.0",
    "pathlib2>=2.3.0,<3.0.0",
    # Dashboard and visualization dependencies
    "streamlit>=1.28.0,<2.0.0",
    "plotly>=5.17.0,<6.0.0",
    "websockets>=11.0.0,<12.0.0",
]

# Dashboard dependencies
dashboard = [
    "streamlit>=1.28.0,<2.0.0",
    "plotly>=5.17.0,<6.0.0",
    "websockets>=11.0.0,<12.0.0",
]

# Full installation - all dependencies
full = [
    "trading-rl-agent[dev,ml,production]",
]

[project.urls]
Homepage = "https://github.com/yourusername/trading-rl-agent"
Documentation = "https://trading-rl-agent.readthedocs.io/"
Repository = "https://github.com/yourusername/trading-rl-agent.git"
"Bug Tracker" = "https://github.com/yourusername/trading-rl-agent/issues"
"Changelog" = "https://github.com/yourusername/trading-rl-agent/blob/main/CHANGELOG.md"

[project.scripts]
trading-rl-agent = "trading_rl_agent.cli:app"

# Alternative Poetry-style scripts section (for Poetry users)
[tool.poetry.scripts]
trading-rl-agent = "trading_rl_agent.cli:app"

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | \.pytest_cache
  | ray_results
  | optimization_results
  | experiments
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
known_first_party = ["src"]
known_third_party = [
    "numpy", "pandas", "torch", "ray", "gymnasium", "yfinance",
    "ta", "scipy", "matplotlib", "seaborn", "plotly", "pytest",
    "pyyaml", "tqdm", "wandb", "optuna", "sklearn", "backtrader"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*/__init__.py"]
force_sort_within_sections = true

[tool.ruff]
# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    "ray_results",
    "optimization_results",
    "experiments",
    "htmlcov",
    "docs/_build",
    "*.ipynb",  # Exclude Jupyter notebooks
]

# Same as Black
line-length = 120
indent-width = 4

# Assume Python 3.11+
target-version = "py311"

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), and pyupgrade (`UP`) rules
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "C90",  # mccabe complexity
    "S",    # bandit security
    "PTH",  # flake8-use-pathlib
    "RUF",  # ruff-specific rules
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "RET",  # flake8-return
    "ARG",  # flake8-unused-arguments
    "ERA",  # eradicate commented code
    "PL",   # pylint
    "PERF", # perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "FLY",  # flynt
]

# Never try to fix these
unfixable = [
    "ERA",  # eradicate: don't remove commented code automatically
    "F841", # unused-variable: let developer decide
    "T20",  # flake8-print: don't remove prints automatically
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Allow module imports not at top of file (needed for dynamic imports, path manipulation)
    "E402",
    # Allow datetime without timezone (acceptable for local development/testing)
    "DTZ001", "DTZ003", "DTZ005",
    # Allow try-else patterns (these are often stylistic preferences)
    "TRY300", "TRY301", "TRY401",
    # Allow unused arguments in certain contexts (common in interfaces, test doubles)
    "ARG001", "ARG002", "ARG005",
    # Allow commented code (might be needed for documentation/examples)
    "ERA001",
    # Allow pathlib and os.path mixing (transitional period)
    "PTH103", "PTH110", "PTH118", "PTH120", "PTH123",
    # Allow certain test patterns
    "PT011", "PT012", "PT017",
    # Allow certain style choices
    "N802", "N803", "N806", "N811", "N814", "N999",
    "S108", "S301", "S311",
    "SIM105", "SIM108", "SIM115", "SIM117",
    "TRY002", "TRY004",
    "UP035",
    "RUF003", "RUF012",
    "B007",
    "F821", "F841",
    "PLW0603", "PLW2901",
    "PERF401",
    "E501",  # Line length handled by formatter
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements (useful for CLI tools and debugging)
    "T201", "T203",
    # Allow assert statements in tests
    "S101",
    # Allow subprocess without shell=False (we need shell commands)
    "S602", "S603", "S607",
    # Allow hardcoded bind to all interfaces (for development servers)
    "S104",
    # Allow try-except-pass (useful for optional imports)
    "S110",
    # Allow subprocess.run with shell=True (needed for complex commands)
    "S602",
    # Don't require error messages in exceptions during prototyping
    "EM101", "EM102", "EM103",
    # Allow long exception messages
    "TRY003",
    # Don't require type annotations everywhere (gradually typed codebase)
    "ANN",
    # Allow relative imports
    "TID252",
    # Allow string formatting in logging
    "G002", "G003", "G004",
    # Allow magic values
    "PLR2004",
    # Allow broad exception catching during development
    "BLE001",
    # Allow implicit namespace packages
    "INP001",
    # Allow zip without strict
    "B905",
    # Ignore isinstance tuple to union conversions (compatibility with older type checkers)
    "UP038",
    # Allow imports that are not at the top level (some Ray imports need to be conditional)
    "PLC0415",
    # Ignore trailing comma rule to avoid conflicts with formatter
    "COM812",
]

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces, rather than tabs
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG", "PLR0913"]
# Allow imports in __init__.py files
"**/__init__.py" = ["F401", "F403", "F405"]
# Allow print statements in CLI scripts
"cli.py" = ["T201"]
"main.py" = ["T201"]
"train.py" = ["T201"]
"evaluate.py" = ["T201"]
"**/scripts/**" = ["T201"]
# Allow subprocess in setup scripts
"setup*.py" = ["S602", "S603", "S607"]
"dev-*.sh" = ["S602", "S603", "S607"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10
max-complexity = 15

[tool.ruff.lint.isort]
known-first-party = ["src", "trading_rl_agent"]
known-third-party = [
    "numpy", "pandas", "torch", "ray", "gymnasium", "yfinance",
    "ta", "scipy", "matplotlib", "seaborn", "plotly", "pytest",
    "pyyaml", "tqdm", "wandb", "optuna", "sklearn", "backtrader"
]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "ray.*",
    "yfinance.*",
    "ta.*",
    "gymnasium.*",
    "wandb.*",
    "optuna.*",
    "plotly.*",
    "seaborn.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests/unit", "tests/integration", "tests/performance", "tests/smoke"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=90",
    "--durations=10",
    "--maxfail=5",
    "--junitxml=test-results.xml",
    "-p", "no:warnings",
    "--disable-warnings",
]
markers = [
    "unit: mark as unit test (fast, isolated)",
    "integration: mark as integration test (components working together)",
    "slow: mark as slow running test (>5 seconds)",
    "gpu: mark as requiring GPU hardware",
    "network: mark as requiring network access",
    "ray: mark as requiring Ray cluster",
    "ml: mark as requiring ML dependencies (PyTorch, etc.)",
    "smoke: mark as smoke test for CI pipeline",
    "e2e: mark as end-to-end test (full pipeline)",
    "regression: mark as regression test",
    "performance: mark as performance test",
    "memory: mark as memory usage test",
    "security: mark as security test",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    "ignore::UserWarning:ray.*",
    "ignore::UserWarning:gymnasium.*",
    "ignore::RuntimeWarning",
    "error::UserWarning:src.*",
]
norecursedirs = [
    ".git",
    ".pytest_cache",
    "__pycache__",
    "*.egg-info",
    "build",
    "dist",
    ".venv",
    "venv",
    "env",
    "ray_results",
    "optimization_results",
    "experiments",
    "htmlcov",
]
minversion = "7.0"

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "setup.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "docs", "build", "dist"]
skips = ["B101", "B601", "B102", "B108", "B324", "B506", "B614"]  # Skip assert_used, shell commands, weak cryptography, unsafe PyTorch load, etc.
