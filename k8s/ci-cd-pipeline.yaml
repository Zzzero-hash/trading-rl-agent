# CI/CD Pipeline Configuration for Trading System
# This file defines the CI/CD pipeline using GitHub Actions or similar

# GitHub Actions Workflow
apiVersion: v1
kind: ConfigMap
metadata:
  name: ci-cd-config
  namespace: trading-system
  labels:
    app: ci-cd
    component: pipeline
data:
  # GitHub Actions workflow configuration
  .github/workflows/deploy.yml: |
    name: Deploy Trading System
    
    on:
      push:
        branches: [ main, develop ]
      pull_request:
        branches: [ main ]
      release:
        types: [ published ]
    
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      NAMESPACE: trading-system
    
    jobs:
      test:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
        
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'
        
        - name: Install dependencies
          run: |
            pip install -r requirements.txt
            pip install -r requirements-dev.txt
        
        - name: Run tests
          run: |
            pytest tests/ -v --cov=src --cov-report=xml
        
        - name: Upload coverage
          uses: codecov/codecov-action@v3
          with:
            file: ./coverage.xml
    
      build:
        needs: test
        runs-on: ubuntu-latest
        if: github.event_name == 'push' || github.event_name == 'release'
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
        
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        
        - name: Log in to Container Registry
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Extract metadata
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            tags: |
              type=ref,event=branch
              type=ref,event=pr
              type=semver,pattern={{version}}
              type=semver,pattern={{major}}.{{minor}}
              type=sha
        
        - name: Build and push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            platforms: linux/amd64,linux/arm64
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
    
      deploy-staging:
        needs: build
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/develop'
        environment: staging
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
        
        - name: Set up kubectl
          uses: azure/setup-kubectl@v3
          with:
            version: 'latest'
        
        - name: Configure kubectl
          run: |
            echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
            export KUBECONFIG=kubeconfig
        
        - name: Deploy to staging
          run: |
            cd k8s
            ./deploy.sh deploy
          env:
            ENVIRONMENT: staging
            IMAGE_TAG: ${{ github.sha }}
    
      deploy-production:
        needs: build
        runs-on: ubuntu-latest
        if: github.event_name == 'release'
        environment: production
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
        
        - name: Set up kubectl
          uses: azure/setup-kubectl@v3
          with:
            version: 'latest'
        
        - name: Configure kubectl
          run: |
            echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
            export KUBECONFIG=kubeconfig
        
        - name: Deploy to production
          run: |
            cd k8s
            ./deploy.sh deploy
          env:
            ENVIRONMENT: production
            IMAGE_TAG: ${{ github.event.release.tag_name }}
        
        - name: Verify deployment
          run: |
            cd k8s
            ./deploy.sh verify
    
      security-scan:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
        
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            scan-type: 'fs'
            scan-ref: '.'
            format: 'sarif'
            output: 'trivy-results.sarif'
        
        - name: Upload Trivy scan results
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: 'trivy-results.sarif'
    
      performance-test:
        needs: deploy-staging
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/develop'
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
        
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'
        
        - name: Install dependencies
          run: |
            pip install locust
        
        - name: Run performance tests
          run: |
            locust -f tests/performance/locustfile.py --host=http://staging-api.trading-system.local --users=100 --spawn-rate=10 --run-time=5m --headless

  # ArgoCD Application configuration
  argocd-app.yaml: |
    apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: trading-system
      namespace: argocd
      finalizers:
        - resources-finalizer.argocd.argoproj.io
    spec:
      project: default
      source:
        repoURL: https://github.com/your-org/trading-system.git
        targetRevision: HEAD
        path: k8s
      destination:
        server: https://kubernetes.default.svc
        namespace: trading-system
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
        - CreateNamespace=true
        - PrunePropagationPolicy=foreground
        - PruneLast=true
      revisionHistoryLimit: 10

  # Tekton Pipeline configuration
  tekton-pipeline.yaml: |
    apiVersion: tekton.dev/v1beta1
    kind: Pipeline
    metadata:
      name: trading-system-pipeline
    spec:
      params:
      - name: git-url
      - name: git-revision
      - name: image-tag
      workspaces:
      - name: shared-workspace
      tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
        - name: output
          workspace: shared-workspace
        params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-revision)
      
      - name: run-tests
        runAfter: ["fetch-repository"]
        taskRef:
          name: python-test
        workspaces:
        - name: source
          workspace: shared-workspace
        params:
        - name: requirements-file
          value: "requirements.txt"
      
      - name: build-image
        runAfter: ["run-tests"]
        taskRef:
          name: kaniko
        workspaces:
        - name: source
          workspace: shared-workspace
        params:
        - name: IMAGE
          value: $(params.image-tag)
      
      - name: deploy
        runAfter: ["build-image"]
        taskRef:
          name: kubectl-apply
        workspaces:
        - name: source
          workspace: shared-workspace
        params:
        - name: namespace
          value: "trading-system"

  # Helm Chart values
  values.yaml: |
    # Trading System Helm Chart Values
    
    global:
      environment: production
      imageRegistry: "your-registry.com"
      imageTag: "latest"
      imagePullPolicy: Always
    
    namespace:
      create: true
      name: trading-system
    
    # API Service configuration
    apiService:
      enabled: true
      replicas: 3
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1000m
          memory: 2Gi
      autoscaling:
        enabled: true
        minReplicas: 3
        maxReplicas: 10
        targetCPUUtilizationPercentage: 70
        targetMemoryUtilizationPercentage: 80
    
    # Trading Engine configuration
    tradingEngine:
      enabled: true
      replicas: 2
      resources:
        requests:
          cpu: 1000m
          memory: 2Gi
        limits:
          cpu: 2000m
          memory: 4Gi
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 5
        targetCPUUtilizationPercentage: 70
        targetMemoryUtilizationPercentage: 80
    
    # ML Service configuration
    mlService:
      enabled: true
      replicas: 2
      gpu:
        enabled: true
        count: 1
      resources:
        requests:
          cpu: 2000m
          memory: 4Gi
          nvidia.com/gpu: 1
        limits:
          cpu: 4000m
          memory: 8Gi
          nvidia.com/gpu: 1
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 4
        targetCPUUtilizationPercentage: 70
        targetMemoryUtilizationPercentage: 80
    
    # Data Pipeline configuration
    dataPipeline:
      enabled: true
      replicas: 2
      resources:
        requests:
          cpu: 1000m
          memory: 2Gi
        limits:
          cpu: 2000m
          memory: 4Gi
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 6
        targetCPUUtilizationPercentage: 70
        targetMemoryUtilizationPercentage: 80
    
    # Infrastructure services
    postgresql:
      enabled: true
      persistence:
        enabled: true
        size: 20Gi
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1000m
          memory: 2Gi
    
    redis:
      enabled: true
      persistence:
        enabled: true
        size: 5Gi
      resources:
        requests:
          cpu: 250m
          memory: 512Mi
        limits:
          cpu: 500m
          memory: 1Gi
    
    rabbitmq:
      enabled: true
      persistence:
        enabled: true
        size: 10Gi
      resources:
        requests:
          cpu: 250m
          memory: 512Mi
        limits:
          cpu: 500m
          memory: 1Gi
    
    # Monitoring stack
    monitoring:
      enabled: true
      prometheus:
        enabled: true
        retention: 200h
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
      grafana:
        enabled: true
        adminPassword: "admin"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
    
    # Ingress configuration
    ingress:
      enabled: true
      className: nginx
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
      - host: api.trading-system.local
        paths:
        - path: /
          pathType: Prefix
      - host: dashboard.trading-system.local
        paths:
        - path: /
          pathType: Prefix
      - host: monitoring.trading-system.local
        paths:
        - path: /
          pathType: Prefix
      tls:
      - secretName: trading-system-tls
        hosts:
        - api.trading-system.local
        - dashboard.trading-system.local
        - monitoring.trading-system.local
    
    # Storage configuration
    persistence:
      enabled: true
      storageClass: standard
      data:
        size: 100Gi
      models:
        size: 50Gi
      artifacts:
        size: 20Gi
      results:
        size: 10Gi
      logs:
        size: 5Gi
      mlruns:
        size: 10Gi