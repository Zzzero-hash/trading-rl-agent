apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-data-pipeline
  namespace: trading-system
  labels:
    app: trading-data-pipeline
    component: data
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: trading-data-pipeline
  template:
    metadata:
      labels:
        app: trading-data-pipeline
        component: data
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: trading-data-pipeline-service-account
      containers:
      - name: data-pipeline
        image: trading-rl-agent:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: TRADING_RL_AGENT_ALPACA_API_KEY
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: alpaca-api-key
        - name: TRADING_RL_AGENT_ALPACA_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: alpaca-secret-key
        - name: TRADING_RL_AGENT_ALPACA_BASE_URL
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: alpaca-base-url
        - name: TRADING_RL_AGENT_ALPHAVANTAGE_API_KEY
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: alphavantage-api-key
        - name: TRADING_RL_AGENT_NEWSAPI_KEY
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: newsapi-key
        - name: POSTGRES_HOST
          value: "trading-db-service"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: postgres-database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: postgres-username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: postgres-password
        - name: REDIS_HOST
          value: "trading-redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: redis-password
        - name: RABBITMQ_HOST
          value: "trading-rabbitmq-service"
        - name: RABBITMQ_PORT
          value: "5672"
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: rabbitmq-username
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: rabbitmq-password
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "production"
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command: ["python", "-m", "src.data_pipeline.main"]
        args:
        - "--port"
        - "8003"
        - "--workers"
        - "4"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: data-volume
          mountPath: /app/data
        - name: results-volume
          mountPath: /app/results
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 90
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: trading-rl-agent-config
      - name: logs-volume
        persistentVolumeClaim:
          claimName: trading-rl-agent-logs
      - name: data-volume
        persistentVolumeClaim:
          claimName: trading-rl-agent-data
      - name: results-volume
        persistentVolumeClaim:
          claimName: trading-rl-agent-results
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - trading-data-pipeline
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: trading-data-pipeline-service
  namespace: trading-system
  labels:
    app: trading-data-pipeline
    component: data
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8003
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: trading-data-pipeline
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-data-pipeline-service-account
  namespace: trading-system
  labels:
    app: trading-data-pipeline
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: trading-data-pipeline-role
  namespace: trading-system
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: trading-data-pipeline-role-binding
  namespace: trading-system
subjects:
- kind: ServiceAccount
  name: trading-data-pipeline-service-account
  namespace: trading-system
roleRef:
  kind: Role
  name: trading-data-pipeline-role
  apiGroup: rbac.authorization.k8s.io