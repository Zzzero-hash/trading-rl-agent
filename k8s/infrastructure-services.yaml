# PostgreSQL Database
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: trading-db
  namespace: trading-system
  labels:
    app: trading-db
    component: database
spec:
  serviceName: trading-db-service
  replicas: 1
  selector:
    matchLabels:
      app: trading-db
  template:
    metadata:
      labels:
        app: trading-db
        component: database
    spec:
      serviceAccountName: trading-db-service-account
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: postgres-database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: postgres-username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - trading_user
            - -d
            - trading_system
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - trading_user
            - -d
            - trading_system
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: trading-db-data
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: trading-db-service
  namespace: trading-system
  labels:
    app: trading-db
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: trading-db
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-db-service-account
  namespace: trading-system
  labels:
    app: trading-db

# Redis Cache
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: trading-redis
  namespace: trading-system
  labels:
    app: trading-redis
    component: cache
spec:
  serviceName: trading-redis-service
  replicas: 1
  selector:
    matchLabels:
      app: trading-redis
  template:
    metadata:
      labels:
        app: trading-redis
        component: cache
    spec:
      serviceAccountName: trading-redis-service-account
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: redis-password
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: trading-redis-data
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: trading-redis-service
  namespace: trading-system
  labels:
    app: trading-redis
    component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: trading-redis
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-redis-service-account
  namespace: trading-system
  labels:
    app: trading-redis

# RabbitMQ Message Queue
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: trading-rabbitmq
  namespace: trading-system
  labels:
    app: trading-rabbitmq
    component: queue
spec:
  serviceName: trading-rabbitmq-service
  replicas: 1
  selector:
    matchLabels:
      app: trading-rabbitmq
  template:
    metadata:
      labels:
        app: trading-rabbitmq
        component: queue
    spec:
      serviceAccountName: trading-rabbitmq-service-account
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management-alpine
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 15672
          name: management
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: rabbitmq-username
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: trading-rl-agent-secrets
              key: rabbitmq-password
        - name: RABBITMQ_DEFAULT_VHOST
          value: trading
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - ping
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: trading-rabbitmq-data
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: trading-rabbitmq-service
  namespace: trading-system
  labels:
    app: trading-rabbitmq
    component: queue
spec:
  type: ClusterIP
  ports:
  - port: 5672
    targetPort: 5672
    protocol: TCP
    name: amqp
  - port: 15672
    targetPort: 15672
    protocol: TCP
    name: management
  selector:
    app: trading-rabbitmq
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-rabbitmq-service-account
  namespace: trading-system
  labels:
    app: trading-rabbitmq